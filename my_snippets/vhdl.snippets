# libraries
snippet polilib "libraries recommended by my university"
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
endsnippet

snippet spolilib "all the libraries ever used by any project provided by an example by my university..."
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
endsnippet

# entities
snippet ent "create entity"
entity ${1:name} is
    port (
        ${2:body};
    );
end $1;
endsnippet

# architecture
snippet arch "create architecture"
architecture ${1:rtl} of ${2:entity_name} is
    ${3:signals};
begin
    ${4:body};
end $1;
endsnippet

# types
snippet slv ""
std_logic_vector
endsnippet

# signals
snippet slsig "defines std_logic signal"
signal ${1:SIGNAL_NAME} : std_logic := ${2:INITIAL_VALUE};
endsnippet

snippet nrsig "defines numeric range signal"
signal ${1:SIGNAL_NAME} : natural range ${2:RANGE_BEGIN} to ${3:RANGE_END};
endsnippet

snippet slin "defines std_logic input signal"
$1 : in std_logic;
endsnippet

# variables and constants
snippet var "defines var of given type"
variable $1 : ${2:natural} := $3
endsnippet

snippet const "expands to generic integral constant declaration"
constant $1 : ${2:natural} := ${3:0};
endsnippet

# processes
snippet pro "defines process"
process (${1:SENSITIVITY_LIST})
begin
    ${2:BODY};
end process;
endsnippet

snippet ifre "for rising edge stuff"
if rising_edge(${1:SIGNAL}) then
    ${2:BODY};
end if;
endsnippet

# components
snippet comp "defines component"
component ${1:COMPONENT_NAME} is
    port (
        ${2:BODY};
    );
end component $1;
endsnippet

snippet inst "instantiate component"
${1:NAME} : ${2:COMPONENT} port map (
    ${3:BODY},
);
endsnippet
